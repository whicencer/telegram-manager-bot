datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model TelegramUser {
  id           String   @id @default(cuid())
  telegramId   BigInt   @unique
  username     String?  @unique
  bots         Bot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hasAccessToBot Boolean @default(false)
  isAdministrator Boolean @default(false)

  @@map("telegram_users")
}

model Bot {
  id           BigInt   @unique
  token        String   @unique
  username     String   @unique
  userId       String
  telegramUser TelegramUser @relation(fields: [userId], references: [id])
  channels     Channel[]
  greetings    Greetings[]
  leavings     Leavings[]
  isAutoApproveEnabled  Boolean @default(false)

  @@map("bots")
}

model Channel {
  id   BigInt   @unique
  title        String
  botId        BigInt
  bot          Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  
  @@map("channels")
}

model Entity {
  id          String   @id @default(cuid())
  greetingId  String?
  leavingId   String?
  greetings   Greetings? @relation(fields: [greetingId], references: [id], onDelete: Cascade)
  leavings    Leavings? @relation(fields: [leavingId], references: [id], onDelete: Cascade)
  offset      Int
  length      Int
  type        String
  url         String?

  @@map("entities")
}

model Button {
  id          String   @id @default(cuid())
  greetingId  String?
  leavingId   String?
  greetings   Greetings? @relation(fields: [greetingId], references: [id], onDelete: Cascade)
  leavings    Leavings? @relation(fields: [leavingId], references: [id], onDelete: Cascade)
  text        String
  url         String

  @@map("buttons")
}

model Greetings {
  id                    String           @id @default(cuid())
  botId                 BigInt
  bot                   Bot              @relation(fields: [botId], references: [id], onDelete: Cascade)
  text                  String           @default("Hello!")
  delayInSeconds        Int              @default(0)  // Delay in seconds
  isAutoDeleteEnabled   Boolean          @default(false)
  autoDeleteDelay       Int              @default(5)  // Auto-delete time in minutes
  imageUrl              String?
  entities              Entity[]
  buttons               Button[]

  @@map("greetings")
}

model Leavings {
  id                    String           @id @default(cuid())
  botId                 BigInt
  bot                   Bot              @relation(fields: [botId], references: [id], onDelete: Cascade)
  text                  String           @default("Hello!")
  delayInSeconds        Int              @default(0)  // Delay in seconds
  isAutoDeleteEnabled   Boolean          @default(false)
  autoDeleteDelay       Int              @default(5)  // Auto-delete time in minutes
  imageUrl              String?
  entities              Entity[]
  buttons               Button[]

  @@map("leavings")
}