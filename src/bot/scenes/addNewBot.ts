import dedent from "dedent";
import { SceneNames } from "constants/Scenes";
import { SceneWithBack } from "./scene";
import { validateTelegramBotToken } from "utils/tokenValidator";
import { prisma } from "database/client";
import botManager from "../botManager";

export const addNewBotScene = new SceneWithBack(
  SceneNames.ADD_NEW_BOT_SCENE,
  SceneNames.MY_BOTS_SCENE
);

addNewBotScene.enter(async (ctx) => {
  const message = dedent`
  üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —É @BotFather
  
  ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å–ª–∏ –≤–∞—à –±–æ—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞–∫–∏–º-—Ç–æ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —É BotFather, –Ω–∞–∂–º–∏—Ç–µ "Revoke Token"`;
  
  ctx.reply(message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "back" }]
      ]
    }
  });
});

addNewBotScene.on("text", async (ctx) => {
  const token = ctx.message.text;

  try {
    await validateTelegramBotToken(token);

    const user = await prisma.telegramUser.findUnique({ where: { telegramId: ctx.from.id } });
    if (!user?.id) {
      return ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    const newBot = await botManager.createBot(token, user.id);
    await ctx.reply(`–ë–æ—Ç ${newBot.username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
    await ctx.scene.enter(SceneNames.MY_BOTS_SCENE);
  } catch (error: Error | any) {
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞`);
    await ctx.scene.leave();
    console.error(error);
  }
});