import { SceneNames } from "constants/Scenes";
import { SceneWithBack } from "../../scene";
import { prisma } from "database/client";
import dedent from "dedent";
import { Actions } from "constants/Actions";
import { deleteMessages } from "utils/deleteMessages";

export const manageUsersScene = new SceneWithBack(
  SceneNames.ADMIN_MANAGE_USERS_SCENE,
  SceneNames.ADMIN_CONTROL_PANEL_SCENE
);

manageUsersScene.enter(async (ctx) => {
  await ctx.reply("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data: "add_new" }],
        [{ text: "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data: "delete_user" }],
        [{ text: "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "users_list" }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: Actions.BACK }],
      ]
    }
  });
});

manageUsersScene.action("users_list", async (ctx) => {
  const users = await prisma.telegramUser.findMany({
    where: {hasAccessToBot: true},
    include: {bots: true}
  });

  const usersList = users.map(user => dedent`<b>ID</b>: ${user.telegramId} | <b>Username:</b> ${user.username} | <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤:</b> ${user.bots.length}`).join("\n");
  await ctx.reply(`<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n${usersList.length ? usersList : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"}`, { parse_mode: "HTML" });
});

manageUsersScene.action("add_new", async (ctx) => {
  await deleteMessages(ctx, [ctx.msg.message_id]);
  await ctx.scene.enter(SceneNames.ADMIN_ADD_USER_SCENE);
});

manageUsersScene.action("delete_user", async (ctx) => {
  await deleteMessages(ctx, [ctx.msg.message_id]);
  await ctx.scene.enter(SceneNames.ADMIN_DELETE_USER_SCENE);
});