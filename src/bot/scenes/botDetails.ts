import dedent from "dedent";
import { SceneNames } from "constants/Scenes";
import { SceneWithBack } from "./scene";
import { prisma } from "database/client";
import { deleteMessages } from "utils/deleteMessages";
import { Actions } from "constants/Actions";

export const botDetailsScene = new SceneWithBack(
  SceneNames.BOT_DETAILS_SCENE,
  SceneNames.MY_BOTS_SCENE
);

botDetailsScene.enter(async (ctx) => {
  // @ts-ignore
  const botId = ctx.session.botId;

  const bot = await prisma.bot.findUnique({
    where: { id: botId }
  });

  const message = dedent`
    ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

    –ò–º—è: @${bot?.username}
    ID: ${bot?.id}
  `;
  const isAutoApproveEnabledEmoji = bot?.isAutoApproveEnabled ? "‚úÖ" : "‚ùå";

  await ctx.reply(message, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data: "greeting" },
          { text: "ü´Ç –ü—Ä–æ—â–∞–Ω–∏—è", callback_data: "farewell" }
        ],
        [{ text: `${isAutoApproveEnabledEmoji} –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫`, callback_data: "autoapprove" }],
        [{ text: "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", callback_data: "connected_channels" }],
        [{ text: "üóë –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", callback_data: "delete" }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: Actions.BACK }],
      ]
    },
    parse_mode: 'HTML'
  });
});

botDetailsScene.action('autoapprove', async (ctx) => {
  // @ts-ignore
  const botId = ctx.session.botId;

  const bot = await prisma.bot.findUnique({
    where: { id: botId }
  });

  await prisma.bot.update({
    where: { id: botId },
    data: {
      isAutoApproveEnabled: !bot?.isAutoApproveEnabled
    }
  });

  const message = bot?.isAutoApproveEnabled
    ? "‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω–æ"
    : "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –≤–∫–ª—é—á–µ–Ω–æ";

  deleteMessages(ctx, [ctx.msg.message_id]);
  const msg = await ctx.reply(message);
  
  await ctx.scene.reenter();

  setTimeout(() => {
    deleteMessages(ctx, [msg.message_id]);
  }, 3000);
});

botDetailsScene.action('delete', async (ctx) => {
  await ctx.deleteMessage(ctx.msg.message_id);
  ctx.scene.enter(SceneNames.DELETE_BOT_SCENE);
});

botDetailsScene.action('greeting', async (ctx) => {
  await ctx.deleteMessage(ctx.msg.message_id);
  await ctx.scene.enter(SceneNames.BOT_GREETINGS_SCENE);
});

botDetailsScene.action('farewell', async (ctx) => {
  await ctx.deleteMessage(ctx.msg.message_id);
  await ctx.scene.enter(SceneNames.BOT_FAREWELLS_SCENE);
});

botDetailsScene.action('connected_channels', async (ctx) => {
  await ctx.deleteMessage(ctx.msg.message_id);
  await ctx.scene.enter(SceneNames.CONNECTED_CHANNELS_SCENE);
});