import { SceneNames } from "constants/Scenes";
import { Actions } from "constants/Actions";
import { prisma } from "database/client";
import { SceneWithBack } from "../scene";

export const connectedChannelsScene = new SceneWithBack(
  SceneNames.CONNECTED_CHANNELS_SCENE,
  SceneNames.BOT_DETAILS_SCENE
);

connectedChannelsScene.enter(async (ctx) => {
  // @ts-ignore
  const botId = ctx.session.botId;
  
  const botChannels = await prisma.channel.findMany({where: { botId }});
  
  await ctx.reply('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã', {
    reply_markup: {
      inline_keyboard: [
        ...botChannels.map(channel => ([{ text: channel.title, callback_data: `channel_${channel.id}` }])),
        [{ text: "‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data: "connect_channel" }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: Actions.BACK }]
      ]
    }
  });
});

connectedChannelsScene.action("connect_channel", async (ctx) => {
  await ctx.reply(
    "<i>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ <b>–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞</b>. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª.</i>",
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: "–û–∫, –ø–æ–Ω—è—Ç–Ω–æ", callback_data: "how_to_connect_agree" }]
        ]
      }
    }
  );
});

connectedChannelsScene.action(/channel_(\-\d+)/, async (ctx) => {
  const channelId = ctx.match[1];
  // @ts-ignore
  ctx.session.channelId = channelId;

  await ctx.deleteMessage(ctx.callbackQuery.message?.message_id);
  await ctx.scene.enter(SceneNames.CHANNEL_DETAILS_SCENE);
});

connectedChannelsScene.action("how_to_connect_agree", async (ctx) => {
  await ctx.deleteMessage(ctx.callbackQuery.message?.message_id);
});