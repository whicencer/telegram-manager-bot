import { SceneNames } from "constants/Scenes";
import { SceneWithBack } from "../scene";
import { Actions } from "constants/Actions";
import { prisma } from "database/client";

export const editFarewellText = new SceneWithBack(
  SceneNames.EDIT_FAREWELL_TEXT_SCENE,
  SceneNames.FAREWELL_DETAILS_SCENE
);

editFarewellText.enter(async (ctx) => {
  await ctx.reply("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—â–∞–Ω–∏—è", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: Actions.BACK }]
      ]
    }
  });
});

editFarewellText.on("text", async (ctx) => {
  // @ts-ignore
  const farewellId = ctx.session.farewellId;
  const newText = ctx.message.text;
  const newEntities = ctx.message.entities;

  try {
    await prisma.leavings.update({
      where: { id: farewellId },
      data: {
        text: newText,
        entities: {
          deleteMany: {},
          create: newEntities,
        }
      }
    });
    await ctx.reply("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–æ—â–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω");
  } catch (error) {
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—â–∞–Ω–∏—è");
    console.error(error);
  } finally {
    await ctx.scene.enter(SceneNames.FAREWELL_DETAILS_SCENE);
  }
});